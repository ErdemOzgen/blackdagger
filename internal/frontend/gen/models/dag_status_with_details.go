// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DagStatusWithDetails dag status with details
//
// swagger:model dagStatusWithDetails
type DagStatusWithDetails struct {

	// d a g
	// Required: true
	DAG *DagDetail `json:"DAG"`

	// dir
	// Required: true
	Dir *string `json:"Dir"`

	// error
	// Required: true
	Error *string `json:"Error"`

	// error t
	// Required: true
	ErrorT *string `json:"ErrorT"`

	// file
	// Required: true
	File *string `json:"File"`

	// status
	// Required: true
	Status *DagStatusDetail `json:"Status"`

	// suspended
	// Required: true
	Suspended *bool `json:"Suspended"`
}

// Validate validates this dag status with details
func (m *DagStatusWithDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDAG(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspended(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DagStatusWithDetails) validateDAG(formats strfmt.Registry) error {

	if err := validate.Required("DAG", "body", m.DAG); err != nil {
		return err
	}

	if m.DAG != nil {
		if err := m.DAG.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DAG")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DAG")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusWithDetails) validateDir(formats strfmt.Registry) error {

	if err := validate.Required("Dir", "body", m.Dir); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusWithDetails) validateError(formats strfmt.Registry) error {

	if err := validate.Required("Error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusWithDetails) validateErrorT(formats strfmt.Registry) error {

	if err := validate.Required("ErrorT", "body", m.ErrorT); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusWithDetails) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("File", "body", m.File); err != nil {
		return err
	}

	return nil
}

func (m *DagStatusWithDetails) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusWithDetails) validateSuspended(formats strfmt.Registry) error {

	if err := validate.Required("Suspended", "body", m.Suspended); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dag status with details based on the context it is used
func (m *DagStatusWithDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDAG(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DagStatusWithDetails) contextValidateDAG(ctx context.Context, formats strfmt.Registry) error {

	if m.DAG != nil {

		if err := m.DAG.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DAG")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DAG")
			}
			return err
		}
	}

	return nil
}

func (m *DagStatusWithDetails) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DagStatusWithDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DagStatusWithDetails) UnmarshalBinary(b []byte) error {
	var res DagStatusWithDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
